/*
 Copyright 2021 SimpleJNI Contributors

 Incorporates work covered by the following copyright
 Copyright 2014 Smartsheet Inc.
 Copyright 2019 SmJNI Contributors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/


plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'maven-publish'
    id 'signing'
}

project.ext.libraryPomName = "SimpleJNI Code Generator"
project.ext.libraryDescription = "Annotation processor that generates SimpleJNI C++ code from Java annotations"

targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    compileOnly files("${System.properties['java.home']}/../lib/tools.jar")

    testImplementation('com.github.tschuchortdev:kotlin-compile-testing:1.4.8')
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.hamcrest:hamcrest:2.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testImplementation project(":annotations")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}


sourceSets {
    main.kotlin.srcDirs = ['src']
    main.resources.srcDirs = ['res']
    test.kotlin.srcDirs = ['test/src']
    test.resources.srcDirs = ['test/res']
}

if (JavaVersion.current() >= JavaVersion.VERSION_16) {
    test {
        jvmArgs(
                "--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
        )
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = kotlinJvmTarget
    }
}

test {
    useJUnitPlatform()
    outputs.upToDateWhen {false}
    systemProperty('test.data.location', new File(rootProject.projectDir, "test_data"))
    systemProperty('test.working.dir', new File(buildDir, "test-output"))
}

task generateTestData(type: Test) {
    group = 'verification'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    outputs.upToDateWhen { false }

    useJUnitPlatform() {
        includeTags("GENERATOR")
    }
    systemProperty('test.data.location', new File(rootProject.projectDir, "test_data"))
    systemProperty('test.working.dir', new File(buildDir, "test-output"))
    environment('JNIGEN_ENABLE_TEST_GENERATION', 'true')

    reports {
        html.enabled false
        junitXml.enabled = false
    }
}


jar {
    manifest {
        attributes 'Implementation-Title': libraryPomName,
                   'Implementation-Version': project.version,
                   'Main-Class': 'smjni.jnigen.Runner'
    }
    metaInf { from('META-INF') }

    setArchiveFileName("jnigen.jar")
    setDestinationDirectory(rootProject.buildDir)
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava, sourceSets.main.kotlin
    classifier "sources"
}

task javadocJar(type: Jar) {
    from javadoc
    classifier 'javadoc'
}

apply from: '../publishing.gradle'




