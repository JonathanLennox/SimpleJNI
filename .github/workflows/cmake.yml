name: CMake

on: [push]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java: ['8', '17']
        os: ['macos-latest', 'windows-latest', 'ubuntu-latest']
        include:
        - os: ubuntu-latest
          cc: gcc-11
          cxx: g++-11
        - os: ubuntu-latest
          cc: gcc-12
          cxx: g++-12
        - os: ubuntu-latest
          cc: gcc-13
          cxx: g++-13
        - os: ubuntu-latest
          cc: clang-13
          cxx: clang++-13
        - os: ubuntu-latest
          cc: clang-14
          cxx: clang++-14
        - os: ubuntu-latest
          cc: clang-15
          cxx: clang++-15

    steps:
    - uses: actions/checkout@v3

    - name: System Setup
      shell: bash
      run: |
        if [[ '${{ matrix.os }}' == 'ubuntu-latest' ]]; then
          if [[ '${{ matrix.cc }}' == 'clang-15' ]]; then
            sudo apt-get update
            sudo apt-get install -y clang-15 clang++-15
          fi

          if [[ '${{ matrix.cc }}' == 'gcc-12' ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc-12 g++-12
          fi

          if [[ '${{ matrix.cc }}' == 'gcc-13' ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc-13 g++-13
          fi
        fi

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'

    - name: Configure CMake
      shell: bash
      run: |
        if [[ '${{ matrix.cc }}' != '' ]]; then
          export CC=${{ matrix.cc }}
        fi
        if [[ '${{ matrix.cxx }}' != '' ]]; then
          export CXX=${{ matrix.cxx }}
        fi
        cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE 

    - name: Build and Test Native
      shell: bash
      run: cmake --build build --config $BUILD_TYPE --target run-jar

    - name: Build and Test JniGen
      shell: bash
      run: cmake --build build --config $BUILD_TYPE --target run-java-tests

    # - name: Test JniGen
    #   working-directory: ${{github.workspace}}/jnigen
    #   shell: bash
    #   run: ./gradlew -PbuildDir=build -Pcode.version=SNAPSHOT test

