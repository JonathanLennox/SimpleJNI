plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.devtools.ksp' version "1.9.0-1.0.13"
}

//JniGen settings
def jniGenProps = new Object() {
    def generatedPath = file("src/main/cpp/generated").absolutePath
    def outputListName = "outputs.txt"
    def additionalClasses = ["java.lang.Byte"]
}

dependencies {

    //JNI annotations
    compileOnly("io.github.gershnik:smjni-jnigen-annotations:${gradle.ext.jniGenVersion}")
    //JNI code generator
    ksp("io.github.gershnik:smjni-jnigen-kprocessor:${gradle.ext.jniGenVersion}")

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

android {
    compileSdk gradle.ext.compileSdk
    namespace 'com.example.myapplication'

    defaultConfig {
        applicationId "com.example.myapplication"
        minSdk gradle.ext.minSdk
        targetSdk gradle.ext.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DJNIGEN_GENERATED_DIR=${file(jniGenProps.generatedPath).parentFile.absolutePath}"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro',
                    '../../../common-proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlin {
        jvmToolchain(8)
    }
    externalNativeBuild {
        cmake {
            path file('../../../cpp/CMakeLists.txt')
            version gradle.ext.cmakeVersion
        }
    }
}

ksp {
    arg("smjni.jnigen.dest.path", jniGenProps.generatedPath)
    arg("smjni.jnigen.own.dest.path", "true")
    arg("smjni.jnigen.output.list.name", jniGenProps.outputListName)
    arg("smjni.jnigen.expose.extra", jniGenProps.additionalClasses.join(";").toString())
}

tasks.withType(com.google.devtools.ksp.gradle.KspTaskJvm).all {
    outputs.upToDateWhen {

        def jniGenOutputList = file("${jniGenProps.generatedPath}/${jniGenProps.outputListName}")

        if (!jniGenOutputList.exists()) {
            return false
        }

        for(line in jniGenOutputList) {
            if (!file("${jniGenProps.generatedPath}/$line").exists()) {
                return false
            }
        }
        return true
    }
}



//Clean generated headers on project clean
task cleanJNIHeaders(type: Delete) {
    delete file("${jniGenProps.generatedPath}")
}
clean.dependsOn cleanJNIHeaders

//Make KSP (and so JniGen code generation) run before CMake build
tasks.whenTaskAdded { theTask ->
    def match = theTask.name =~ ~/^buildCMake([^\[]*).*$/
    if (match) {
        def config
        switch(match.group(1)) {
            case "RelWithDebInfo": config = "Release"; break
            default: config = match.group(1); break
        }
        theTask.dependsOn "ksp${config}Kotlin"
    }
}



