plugins {
    id 'com.android.application'
}

//JniGen settings
def jniGenProps = new Object() {
    def generatedPath = "src/main/cpp/generated"
    def outputListName = "outputs.txt"
    def additionalClasses = ["java.lang.Byte"]
}

dependencies {

    //JNI annotations
    compileOnly("smjni.jnigen:annotations:${gradle.ext.jniGenVersion}")
    //JNI code generator
    annotationProcessor("smjni.jnigen:processor:${gradle.ext.jniGenVersion}")

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}


android {
    compileSdk gradle.ext.compileSdk

    defaultConfig {
        applicationId "com.example.myapplication"
        minSdk gradle.ext.minSdk
        targetSdk gradle.ext.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //Pass options for JniGen
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "smjni.jnigen.dest.path"       : file(jniGenProps.generatedPath).path,
                        "smjni.jnigen.own.dest.path"   : "true",
                        "smjni.jnigen.output.list.name": jniGenProps.outputListName,
                        "smjni.jnigen.expose.extra"    : jniGenProps.additionalClasses.join(";").toString()
                ]
            }
        }
        externalNativeBuild {
            cmake {
                arguments "-DJNIGEN_GENERATED_DIR=${file(jniGenProps.generatedPath).parentFile.absolutePath}"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro',
                    '../../../common-proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('../../../cpp/CMakeLists.txt')
            version gradle.ext.cmakeVersion
        }
    }
}


//This makes Gradle rebuild Java compilation (and so run annotation processor)
//when any of the generated files are missing
//Use libraryVariants if you are building a library
android.applicationVariants.all { variant ->

    variant.javaCompileProvider.get().outputs.upToDateWhen {

        def jniGenOutputList = file("${jniGenProps.generatedPath}/${jniGenProps.outputListName}")

        if (!jniGenOutputList.exists()) {
            return false
        }

        for(line in jniGenOutputList) {
            if (!file("${jniGenProps.generatedPath}/$line").exists()) {
                return false
            }
        }
        return true
    }
}

//Clean generated headers on project clean
task cleanJNIHeaders(type: Delete) {
    delete file("${jniGenProps.generatedPath}")
}
clean.dependsOn cleanJNIHeaders


//Make Java compilation (and JniGen code generation) run before CMake build
tasks.whenTaskAdded { theTask ->
    def match = theTask.name =~ ~/^buildCMake(.*)$/
    if (match) {
        def config;
        switch(match.group(1)) {
            case "RelWithDebInfo": config = "Release"; break
            default: config = match.group(1); break;
        }
        theTask.dependsOn "compile${config}JavaWithJavac"
    }
}
