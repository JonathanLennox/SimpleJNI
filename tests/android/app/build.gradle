plugins {
    id 'com.android.application'
}

//JniGen settings
def jniGenProps = new Object() {
    def generatedPath = "../../src/cpp/generated"
    def outputListName = "outputs.txt"
    def additionalClasses = ["java.lang.AssertionError"]
}

dependencies {

    annotationProcessor("io.github.gershnik:smjni-jnigen-processor:SNAPSHOT")

    compileOnly 'io.github.gershnik:smjni-jnigen-annotations:SNAPSHOT'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
}

android {
    compileSdk 34
    namespace 'com.example.smjni_test'

    defaultConfig {
        applicationId "com.example.smjni_test"
        minSdk 16
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "smjni.jnigen.dest.path"       : file(jniGenProps.generatedPath).path,
                        "smjni.jnigen.own.dest.path"   : "true",
                        "smjni.jnigen.output.list.name": jniGenProps.outputListName,
                        "smjni.jnigen.expose.extra"    : jniGenProps.additionalClasses.join(";").toString()
                ]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += '../../src/java'
        main.jniLibs.srcDirs  += 'libs'
    }

    packaging {
        resources.excludes += ["META-INF/LICENSE.md", "META-INF/LICENSE-notice.md"]
    }
}


android.applicationVariants.all { variant ->

    variant.javaCompileProvider.get().outputs.upToDateWhen {

        def jniGenOutputList = file("${jniGenProps.generatedPath}/${jniGenProps.outputListName}")

        if (!jniGenOutputList.exists()) {
            return false
        }

        for(line in jniGenOutputList) {
            if (!file("${jniGenProps.generatedPath}/$line").exists()) {
                return false
            }
        }
        return true
    }
}

task cleanJNIHeaders(type: Delete) {
    delete file("${jniGenProps.generatedPath}")
}
clean.dependsOn cleanJNIHeaders

tasks.whenTaskAdded { theTask ->
    def match = theTask.name =~ ~/^buildCMake([^\[]*).*$/
    if (match) {
        def config
        switch(match.group(1)) {
            case "RelWithDebInfo": config = "Release"; break
            default: config = match.group(1); break
        }
        theTask.dependsOn "compile${config}JavaWithJavac"
    }
}
